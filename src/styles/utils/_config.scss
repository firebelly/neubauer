/* _config.scss */

/* ---------------------------------------------------------------------
 _config contains project-specific settings
------------------------------------------------------------------------ */

/* ---------------------------------------------------------------------
 Breakpoints Map
------------------------------------------------------------------------ */
$breakpoints: (
	"xs": "0",
	"sm": "768px", 
	"md": "62em",
	"lg": "1260px",
	"xl": "1441px"
);

/* ---------------------------------------------------------------------
 Fonts
 font url is relative to our compiled stylesheet
------------------------------------------------------------------------ */
@mixin getFont($fontname, $filename, $isBold: false, $isItalic: false) {

	@font-face {
		font-family: $fontname;
		src: url('../fonts/#{$fontname}/#{$filename}.eot'),
		     url('../fonts/#{$fontname}/#{$filename}.woff') format('woff'),
             url('../fonts/#{$fontname}/#{$filename}.woff2') format('woff2'),
		     url('../fonts/#{$fontname}/#{$filename}.ttf') format('truetype');

		@if $isBold {
			font-weight: bold;
		} @else {
			font-weight: normal;
		}
		@if $isItalic {
			font-style: italic;
		} @else {
			font-style: normal;
		}
	}
}

// Define project fonts
$font-primary-name: 'domaine-text';
$font-primary-file: 'domaine-text-light';

$font-secondary-name: 'apercu';
$font-secondary-file: 'apercu-light';

$font-tertiary-name: 'domain-text-italic';
$font-tertiary-file: 'domaine-text-lightitalic';

@include getFont($font-primary-name, $font-primary-file);
@include getFont($font-secondary-name, $font-secondary-file);
@include getFont($font-tertiary-name, $font-tertiary-file, $isItalic: true);

$font-primary: $font-primary-name, serif;
$font-secondary: $font-secondary-name, sans-serif;
$font-tertiary: $font-tertiary-name, serif;

// DevHub font
$font-devhub: sans-serif;

/* ---------------------------------------------------------------------
 palettes() Map
 Maps global color families, assigning a "core" or default to each one
------------------------------------------------------------------------ */
$palettes: (
	'red': (
		core: #800000,
		10: #FFE5E6,
		20: rgba(255, 229, 230, 0.1),
		30: rgba(128, 0, 0, 0.1)
	),
	'yellow': (
		core: #FFF2B2,
		10: #3F3606
	),
	'green': (
		core: #1F4D49,
		10: #E5FFFD,
		20: #E5E8E3,
		30: #51594A
	),
	'blue': (
		core: #1C2AA7,
		10: #E5E8FF
,	),
	'gray': (
		core: #151515,
		10: #F6F4F4
	),
	'white': (
		core: #FFFFFF
	),
	'black': (
		core: #000000,
		10: #151515
	),
	// DevHub palette
	'devhub': (
		'blue': #4a7cf6,
		'red': #ff3d00,
		'orange': #ff3d00,
		'gray': #e2e8f0
	)
);

/* ---------------------------------------------------------------------
 getColor()
 Retrieves color from palettes() map based on hue, and optional tone parameters

 // Props to https://www.ibm.com/design/language/resources for the conditional
 // which enforces the %10 convention within the palette map

 // Usage:
 // background: getColor('gray', 10); // #ecf0f4
 // background: getColor('gray');     // #5E788D
------------------------------------------------------------------------ */
@function getColor($color, $tone: 'core') {

  @if type-of($tone) == 'number' {

  	@if $tone % 10 == $tone {
    	$tone: $tone * 10;
    }

  }

  @return map-get(map-get($palettes, $color), $tone);

}
