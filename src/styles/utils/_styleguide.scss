/* _styleguide.scss */
@use "mixins" as *;
@use "helpers" as *;
@use "config" as *;
@use "sass:math";
@use "sass:string";
@use "sass:list";

/* ---------------------------------------------------------------------
 _styleguide contains project-specific style patterns
------------------------------------------------------------------------ */
// svg path, relative to compiled stylesheet
$svg-path: '../svgs/';

/* ---------------------------------------------------------------------
 Type
 1. ems based on 1rem-sized parent
 2. relative line-heights
 3. quoted font-size/line-height to avoid old sass math calcs
------------------------------------------------------------------------ */
$text-map: (
	// "type-name": ("$font-size/$line-height,$font-family,$letter-spacing,$text-decoration,$text-transform"
	
	// Openers
	"o-normal": ("12em/1",$font-primary,-0.02em),	
	"o-italic": ("12em/1",$font-tertiary,-0.02em),
	// Headlines 1
	"h1-normal": ("6.5em/1.08",$font-primary,-0.035em),
	"h1-italic": ("6.5em/1.08",$font-tertiary,-0.03em),
	"h1-sans": ("6.5em/1.08",$font-secondary,-0.0075em),	
	// Headlines 2
	"h2-normal": ("4em/1.12",$font-primary,-0.035em),
	"h2-italic": ("4em/1.12",$font-tertiary,-0.0125em),
	"h2-sans": ("4em/1.12",$font-secondary,-0.0375em),
	// Headlines 3
	"h3-normal": ("3em/1.17",$font-primary,-0.01em),
	"h3-italic": ("3em/1.17",$font-tertiary,-0.01em),
	"h3-italic-ul": ("3em/1.17",$font-secondary,-0.01em,underline),
	"h3-sans": ("2.8em/1.25",$font-secondary),
	"h3-sans-ul": ("2.8em/1.25",$font-secondary,normal,underline),
	// Headlines 4
	"h4-normal": ("2em/1.5",$font-primary,-0.01em),
	"h4-italic": ("2em/1.5",$font-tertiary),
	"h4-sans": ("2em/1.5",$font-secondary),
	// Non-headlines
	"action": ("1.2em/1.67",$font-secondary,0.1em,inherit,uppercase),
	"subtitle": ("2.4em/1.46",$font-secondary),
	"p": ("2em/1.5",$font-secondary),
	"caption": ("1.6em/1.56",$font-secondary),
	"fine": ("1.4em/1.43",$font-secondary),
	"micro": ("1.2em/1.2",$font-secondary)
);

@mixin getType($name) {
	$type-attrs: map-get($text-map, $name);
	$type-length: list.length($type-attrs);
	$sizing: nth($type-attrs,1);
	$family: nth($type-attrs,2);
	$spacing: if($type-length >= 3,nth($type-attrs,3),null);
	$decoration: if($type-length >= 4,nth($type-attrs,4),null);
	$transform: if($type-length >= 5,nth($type-attrs,5),null);
	// Declare type
	font: normal string.unquote($sizing) $family;
	@if ($spacing != null) {
		letter-spacing: $spacing;
	}
	@if ($decoration != null) {
		text-decoration: $decoration;
	}	
	@if ($transform != null) {
		text-transform: $transform;
	}	
}

/* ---------------------------------------------------------------------
 Themes
------------------------------------------------------------------------ */
$theme-map: (
	'red': (getColor('red'),getColor('red',10)),
	'yellow': (getColor('gray'),getColor('yellow')),
	'green': (getColor('green'),getColor('green',10)),
	'blue': (getColor('blue'),getColor('blue',10)),
	'gray': (getColor('gray'),getColor('gray',10)),
	'black': (getColor('black'),getColor('white'))
);

@function getTheme($color) {
	@return map-get($theme-map, $color);
}

/* ---------------------------------------------------------------------
 Buttons
------------------------------------------------------------------------ */
@mixin globalButton($selector) {

	#{$selector} {
		@include resetNativeButton;

		// Interactives
		&:hover {
			cursor: pointer;
		}
		&:focus {
			outline: none;
		}
		// Button link   
		&:link,
		&:visited,
		&:hover,
		&:active {
			text-decoration: none;
		}
		// Variants
		$button-variants: (
			"confirm": getColor('green'),
			"save": getColor('blue'),
			"cancel": getColor('gray'),
			"alert": getColor('red'),
			"ignore": getColor('yellow')
		);
		@each $button, $color in $button-variants {
			&--#{$button} {
				background-color: $color;
				&:hover,
				&:focus,
				&:active {
                	background-color: darken($color, 10%);
            	}
			}
		}
		// States
		&._is-inactive {
			background: getColor('gray',20);
			pointer-events: none;
		}
	}

}

/* ---------------------------------------------------------------------
 Lists
------------------------------------------------------------------------ */
@mixin globalList($selector,$direction:horizontal,$color:getColor('black')) {

	#{$selector} {

		@if $direction == 'horizontal' {
			@include flexParent;
			@include justifyContent(space-between);
		}

		li {
			@include flexChild();
		}

		a:link,
		a:visited,
		a:hover,
		a:active {
			display: block;
			color: $color;
			text-decoration: none;
		}
	
	}

}
