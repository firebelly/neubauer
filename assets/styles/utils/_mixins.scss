/* _mixins.scss */

/* ---------------------------------------------------------------------
 _mixins contains a collection of commonly used mixins, most of which require args.
------------------------------------------------------------------------ */

/* ---------------------------------------------------------------------
 Flex Container
------------------------------------------------------------------------ */
// Container
@mixin flexBox($value:flex) {
    $prefix: if($value == 'inline-flex','inline-','');
    display: -webkit-#{$prefix}box;
	display: -ms-#{$prefix}flexbox;
	display: -webkit-#{$prefix}flex;
	display: $value;
}

// Direction options: row | row-reverse | column | column-reverse;
@mixin flexDirection($direction:row) {
	flex-direction: $direction;
}

// Wrap options: flex-wrap: nowrap | wrap | wrap-reverse;
@mixin flexWrap($wrap:nowrap) {
	flex-wrap: $wrap;
}

// Flex direction and wrap shorthand
@mixin flexFlow($values:row nowrap) {
    -webkit-flex-flow: $values;
    flex-flow: $values;
}

/* ---------------------------------------------------------------------
 Flex Items
------------------------------------------------------------------------ */
@mixin flexGrow($value:0) {
	flex-grow: $value;
}

@mixin flexShrink($value:1) {
	flex-shrink: $value;
}

// Basis options: auto | $length (e.g. 33% or 3rem)
@mixin flexBasis($value:auto) {
	flex-basis: $value;
}

// Alignment options: auto | flex-start | flex-end | center | baseline | stretch
// Overrides default align-items on individual flex items
@mixin alignSelf($alignment:stretch) {
	align-self: $alignment;
}

@mixin flexOrder($order:0) {
	$order-vendors: -webkit-box-ordinal-group,-moz-box-ordinal-group,-ms-flex-order,-webkit-order;
  	@each $vendor in $order-vendors {
        #{$vendor}: $order;
    }
  	order: $val;
}

/* ---------------------------------------------------------------------
 Flex Parent-Child Shorthand
------------------------------------------------------------------------ */
@mixin flexParent($display:null,$values:row wrap) {
    $display: if($display,$display,flex);
	@include flexBox($display);
    @include flexFlow($values);
}

// Flex options: none | $flex-grow $flex-shrink {optional} | $flex-basis
@mixin flexChild($values:0 1 auto) {
	$flex-vendors: -webkit-box-,-moz-box-,-webkit-,-ms-;
    @each $vendor in $flex-vendors {
        #{$vendor}flex: $values;
    }
    flex: $values;
}

/* ---------------------------------------------------------------------
 Flex / Grid Alignment (container > item)
 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
------------------------------------------------------------------------ */
// Alignment options: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe
@mixin alignItems($alignment:stretch) {
    $align-vendors: -webkit-box-align,-ms-flex-align,-webkit-align-items;
    @each $vendor in $align-vendors {
        #{$vendor}pack: $alignment;
    }
    align-items: $alignment;
}

// Alignment options: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe
// Safest x-browser options: flex-start | flex-end | center
@mixin justifyContent($alignment:normal) {
    $justify-vendors: -webkit-box-, -moz-box-,-ms-flex-;
    @each $vendor in $justify-vendors {
        #{$vendor}pack: $alignment;
    }
    -webkit-justify-content: $alignment;
    justify-content: $alignment;
}

/* ---------------------------------------------------------------------
 Grids
------------------------------------------------------------------------ */
@mixin gridTmplCol($count,$width:null) {
    display: grid;
	grid-template-columns: repeat($count, 1fr);
    width: if($width,$width,100%);
}

@mixin gridTmplRow($count,$width:null) {
    display: grid;
	grid-template-rows: repeat($count, 1fr);
}

/* ---------------------------------------------------------------------
 Box Decoration
------------------------------------------------------------------------ */
@mixin boxShadow($hshadow,$vshadow,$blur,$spread,$color...) {
    $shadow-vendors: -moz-box-, -webkit-box-;
    @each $vendor in $shadow-vendors {
    	#{$vendor}shadow: $hshadow $vshadow $blur $spread $color;
    }
   	box-shadow: $hshadow $vshadow $blur $spread $color;
}

@mixin boxShadowTop($vshadow,$blur,$spread,$color) {
	$hshadow: 0;
    $spread: -1 * $spread;
    $vshadow: -1 * $vshadow;
    @include boxShadow($hshadow,$vshadow,$blur,$spread,$color);
}

@mixin boxShadowBottom($vshadow,$blur,$spread,$color) {
	$hshadow: 0;
    $spread: -1 * $spread;
    @include boxShadow($hshadow,$vshadow,$blur,$spread,$color);
}

@mixin boxShadowLeft($vshadow,$blur,$spread,$color) {
	$hshadow: 0;
    $vshadow: -1 * $vshadow;
    @include boxShadow($hshadow,$vshadow,$blur,$spread,$color);
}

@mixin boxShadowInset($hshadow,$blur,$color) {
    $vshadow: 0;
    $spread: 0;
    @include boxShadow($hshadow,$vshadow,$blur,$spread,$color inset);
}

/* ---------------------------------------------------------------------
 Calculations
 @include calc('width', '100% - value');
------------------------------------------------------------------------ */
@mixin calc($key, $value) {
	$calc-vendors: -webkit-calc, -moz-calc;
	@each $vendor in $calc-vendors {
    	#{$key}: #{$vendor}(#{$value});
    }
	#{$key}: calc(#{$value});
}

/* ---------------------------------------------------------------------
 Positioning
------------------------------------------------------------------------ */
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}
@mixin positionIt($x,$y) {
    $vendors: -webkit-,-moz-,-ms-input-,-o-;
    $x: strip-unit($x);
    $y: strip-unit($y);
    $left: $x*1%;
    $top: $y*1%;
    position: absolute;
    left: $left;
    top: $top;

    $translate: translateX($left*-1) translateY($top*-1);

    @each $vendor in $vendors {
       #{$vendor}transform: $translate;
    }
    transform: $translate;
}

/* ---------------------------------------------------------------------
 Animations
 Usage:
 @include keyframes(fade-in) {
    0% { opacity: 0; }
    100% { opacity: 1; }
 }
 @include animation(3s ease 0s normal forwards 1 fade-in);
------------------------------------------------------------------------ */
@mixin keyframes($animation-name) {

    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }

}

@mixin animation($str) {
    -webkit-animation: #{$str};
    animation: #{$str};
}


